// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Twitter.Models;

namespace Twitter.Migrations
{
    [DbContext(typeof(TwitterContext))]
    [Migration("20200518001048_TwitterMessages")]
    partial class TwitterMessages
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Twitter.Models.Follow", b =>
                {
                    b.Property<int>("FollowId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FollowDate");

                    b.Property<int>("MainUserId");

                    b.Property<int?>("UserId");

                    b.HasKey("FollowId");

                    b.HasIndex("UserId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("Twitter.Models.HashTag", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<DateTime>("ShareDate");

                    b.Property<string>("TopicPlace");

                    b.HasKey("id");

                    b.ToTable("HashTags");
                });

            modelBuilder.Entity("Twitter.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LikeDate");

                    b.Property<int>("TweetId");

                    b.Property<int?>("UsersId");

                    b.HasKey("Id");

                    b.HasIndex("TweetId");

                    b.HasIndex("UsersId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Twitter.Models.Messages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message");

                    b.Property<DateTime>("MessageTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Twitter.Models.ReTweet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TweetId");

                    b.HasKey("Id");

                    b.HasIndex("TweetId");

                    b.ToTable("ReTweets");
                });

            modelBuilder.Entity("Twitter.Models.Tweet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("Link");

                    b.Property<string>("Picture");

                    b.Property<DateTime>("ShareDate");

                    b.Property<int>("UserId");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("Tweets");
                });

            modelBuilder.Entity("Twitter.Models.TweetHashTagMapping", b =>
                {
                    b.Property<int>("MappingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HashTagId");

                    b.Property<int>("TweetId");

                    b.HasKey("MappingId");

                    b.HasIndex("HashTagId");

                    b.HasIndex("TweetId");

                    b.ToTable("TweetHashTags");
                });

            modelBuilder.Entity("Twitter.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("Phoneumber");

                    b.Property<string>("ProfilePhoto");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Twitter.Models.Follow", b =>
                {
                    b.HasOne("Twitter.Models.Users", "User")
                        .WithMany("Follows")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Twitter.Models.Like", b =>
                {
                    b.HasOne("Twitter.Models.Tweet", "Tweet")
                        .WithMany("Likes")
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Twitter.Models.Users")
                        .WithMany("Likes")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("Twitter.Models.Messages", b =>
                {
                    b.HasOne("Twitter.Models.Users", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Twitter.Models.ReTweet", b =>
                {
                    b.HasOne("Twitter.Models.Tweet", "Tweet")
                        .WithMany("ReTweets")
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Twitter.Models.Tweet", b =>
                {
                    b.HasOne("Twitter.Models.Users", "User")
                        .WithMany("Tweets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Twitter.Models.TweetHashTagMapping", b =>
                {
                    b.HasOne("Twitter.Models.HashTag", "HashTag")
                        .WithMany("TweetHashTag")
                        .HasForeignKey("HashTagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Twitter.Models.Tweet", "Tweet")
                        .WithMany("TweetHashTag")
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
